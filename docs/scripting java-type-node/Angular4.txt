https://www.youtube.com/watch?v=Bv_5Zv5c-Ts   (Tony Alicea)
https://www.youtube.com/playlist?list=PL1BztTYDF-QNlGo5-g65Xj1mINHYk_FM9  v16

C:\2gitsource\anguler-projects


practice 1: create one reactive style form
practice 2: create one templete driven style form

general web problems
------------------------
html does not support custom attributes(Html5 supports data attributes)
Javascript global scope issue(solve with encapsulation)
// without Dependency injection
	var person = fuction(fname, lname){
		this.fanme=fname;
		this.lanme=lname;
	}
	fuction logPerson(){
		var john= new person("fone","lone");
		console.log(john);
	}
	logPerson();
//with dependency injection (create fuction to accepect object and create object outside)
	fuction logPerson(person){
		console.log(person);
	}
	var john= new person("fone","lone");
	logPerson(john);

benifits of AngularJs
---------------------
we can build UI without depending on business logic technology(.net/java).
Another difference to note about using AngularJS instead of JSP is that we would prefer not to use HTML forms 
	and the traditional form submissions to pass data to the server side. Instead, we will prefer to encapsulate form submissions in a JSON object 


history
-----------------
	AngularJS 1 released in 2012.
	Angular 4 released in March 2017
	Angular 4 is almost the same as Angular 2. It has a backward compatibility with Angular 2.
	Angular 4 is updated to a recent version of TypeScript, which is 2.2. 
	Angular 2 uses TypeScript version 1.8.
	AngularJS is based on the model view controller, whereas Angular 2 is based on the components structure

Angular 4 - Environment Setup
-------------------------------------------
	step1: install node.js
		Nodejs
		Npm
		node –v  (v20)
		npm –v
	Step2: Angular CLI
		c:\angular9>npm install –g @angular/cli@latest  // to install angular cli on your system.(create new folder)
		c:\angular9>ng version //this is working version is 17
		c:\angular9>ng -v
		c:\angular9>ng --version
		software will be installed  at C:\Users\2121313\AppData\Roaming\npm\node_modules\@angular\cli
		note: ng -v maynot work, but try ng new proj1
		note2: for access issue, remove C:\Users\username\AppData\Roaming\npm\ng.ps1
	Step3: create project
		c:\angular9>ng new proj1 // name of the project
		c:\angular9>cd proj1
		c:\angular9\proj1>ng serve -o //command builds the application and starts the web server(port 4200).
		http://localhost:4200/
		ng serve --host 0.0.0.0 –port 4205 // to change port
	VS code
		download  Visual Studio code IDE https://code.visualstudio.com/
		Ctrl+Shift+P
		tips:https://code.visualstudio.com/docs/getstarted/tips-and-tricks#vscode



-----------------------------------------------------------------------------------------------------------------------
	
what is difference between AngularJS and Angular 2
	AngularJS is based on the model view controller, whereas Angular 2 is based on the components structure
how to create project folder
	src will have (App folder, index.html, main.js, main.ts, style.css)
	App folder will have (app.module.ts, app.module.js, app.component.ts, app.component.html)
if class is decoratored with 
	@Component   Component
	@NgModule    Module
	@Injectable() is service
how to import Component
	import { Component } from "@Angular/core"
what are the component peoperties
	selector, templete, templeteUrl, styleUrls, providers
what is derective in html page
	component property selecter value becomes derective in html
	@Component({
		selector:'my-app',
		template:`<h1> hello{{name}}</h1>` //if html has multiple lines then we shoud use Backtick(~) charcter
	})
how to define variable in component 
	message: String ="abc";
{{mone(4,7)}}

	<div *ngIf="items.length > 0">items are:</div>

	<p *ngFor=" let item of items">item</p>
How to call method on button click
	<button (click)="mone()"> expand/toggle</button> (here we are using parantasis)
How to created nested component
	create new commponent in app componet 
		create employee folder in app folder
		create employee.componet.html and employee.component.ts in employee folder
	in app.module.ts file
		import employee component 
			import { EmployeeComponent } from './employee/employee.component'
		and change decalration
			@NgModule({
				delaration : [AppComponet, EmployeeComponent],
			})
	add employee selecter in app.component.html
what are different types of bindings
	interpolation, property, attribute, class, style,event bindings
what is interpolation
	<h1>{{message}},/h1>// this is interpolation we are accessing component properties in view
	{{ 'Message :'+message}} // we can concatinate in interpolation
	{{10+20+60}}// we can do calculations also
	{{ header ? header : 'no header'}}//we can use termani operator
what is property binding
	in property binding also data flows from componet to view
	interpolation will be automatically converted to property binding
	<img [src]='pro2' />
	<img src='http://abc{{img2}}'/> this is interpolation. here we can not use property binding
	<button [disable]='isDisable'>click </button> // we should property binding in case of non sting value here isDisable is boolean
	<button disable='{{isDisable}}'>click </button>// this does not work since isDisable is not string
	<span [innerHtml]='pro2'/>// this property binding
	<span bind-innerHtml='pro2'/>// this cenonical form property binding
what is difference beteen html attribute and DOM property
	HTML attributes and DOM properties are different things
	attributes job is just initialize DOM properties.
	Angular binding works with properties and events and not attributes
	attribute value does not change but property
		<input id='id2' type='text' value='Tom'>
		load this page in browser and open developer tools
			id2.getAttribute('value') then enter//this will print attribute value as Tom
			id2.value then enter//this will give us value of property value as Tom
		now edit textfield value and do not reload just edit text in text box
			now we can see diiferent value for property but attribute value is still same
what is attribute binding
	sometimes we can not use property binging, since DOM many not have property 
	to corresponding html element attribute. like colspan
	<th colspan="{{size}}">//does not work because we have colspan html attribute but we do not have colspan DOM property
	<th attr.colspan="{{size}}">// this works because here we used angular attribute binding
what is class binding
	style.css
	.colorClass{ color:red; }
	.boldClass{ font-weight:bold; }
	<button class="colorClass">ok</button>// here we hardcoded class name directly So this works
	<button class="colorClass" [class]='boldClass'>ok</button>//[class] overrides existing class
	<button class="colorClass" [class]='applyBold'>ok</button>//here applyBold is calss property
	<button class="colorClass" [class.boldClass]='true'>ok</button>//this does not override
	<button class="colorClass" [class.boldClass]='isBold'>ok</button>//here isBold is calss property
what is ngClass
	we can use ngClass directive to apply multiple classes
	<button class="colorClass" [ngClass]='addClasses()'>ok</button>//here addClasses is method
	wich return object, that object keys are classes names and values will be true or false
what is style binding
	<button style='color:red'>ok</button>//this is hard coded
	<button style='color:red' [style.font-weight]="isBold ? 'bold' : 'normal'">ok</button>
	//here isBold is class property
	<button style='color:red' [style.fontWeight]="isBold ? 'bold' : 'normal'">ok</button>//it works too
	<button style='color:red' [ngStyle]="addStyles()">ok</button>// @ngStyle
	export class AppComponent {
		isBold: boolean = true;
		fontSize: number =30;
		isItalic: boolean = true;
		addStyles(){
		 let styles ={
			'font-size.px': this.fontSize,
			'font-style':this.isItalic ? 'italic':'normal',
			'font-weight':this.isBold ? 'bold':'normal',
		 };
		 return styles;
		}
	}		
what is event binding
	event binding (html to property)
	<button (click)='mone()'>ok</button>//here we are using parantasis insted of sqire bracktes
	export class AppComponent {
		mone():void{
			cnsole.log('button clicked');
		}
	}
	<button on-click='mone()'>ok</button>//canonical form

what is two way binding how we can achive it
	FormsModule in app.module.ts file
		import {FormsModule} from '@angular/platform-browser'
		@NgModule({
			imports:[FormsModule],
		})
	<input type="text" [(ngModel)] ="fname"/> (banana in the box syntax)
	{{fname}}

	and define fname variable in componet class
	fname:string ="xyz";
	Now what ever we type in text box that will reflect in display
how to hide few rows in table
	<tr *ngIf='showDetails'><td>{{firstName}}</td></tr>
	<tr *ngIf='showDetails'><td>{{lastName}}</td></tr>
	<button (click)='mone()'>ok</button>
	export class AppComponent {
		firstName :string ="fone";
		lastName :string ="lone";
		showDetails: boolean = false;
		mone():void{
			this.showDetails=!showDetails;
		}
	}
how to display list 
	export class AppComponent {
	 arry1 :any[] ={ {p1: 'v1',p2:'v2'}, {p1: 'v21',p2:'v22'} }
	}
	<tr ngFor="let x of arry1">
		<td>{{p1}}</td>	<td>{{p2}}</td>
	</tr>
	<tr ngIf="!arry1 || arry1.length==0">
		<td>no elements</td>
	</tr>

	
How to create interface
	create employee.ts in eployee folder
	export Interface IEmployee{
		name:string;// by default it is public and we can add public keyword
		gender:string;
	}
	import IEmployee
		import {IEmployee} from './employee'
	use it in class
		export class Employee{
			employeeList:IEmployee[];
			constructor(){
				this.employeeList =[ {name:'none', gender:'male'}, {name:'ntwo', gender:'male'} ]
			}
		}
How to implement interface
	export Cone implements IEmployee{
		public name:string;
		public gender:string;
		constructor(name:string, gender:string){
			this.name=name;
			this.gender=gender;
		}
	}
	the above code we can convert to short hand form
	export Cone implements IEmployee{
		constructor(public name:string, public gender:string){
		}
	}
how to write method in interface
	mone(sal:number):number;
how to implement interface method
	mone(sal:number):number { return 500;}
how to define optional property in interface
	pone?:string;//here ? indicates this is optional
what are angular lifecycle hooks
	ngOnInt()//gets called after constructor
	ngOnChanges()//
	ngOnDestroy()//for clean up before destroy
	there are others also
how to impliment service
	create file employee.service.ts//file name
	import Injectable and decorate class with Injectable(Injectable is used to inject dependency)
		import { Injectable } from '@angular/core';
		import { IEmployee } from '@./employee';
		@Injectable()
		export class EmployeeService {
			getEmployees():IEmployee[]{
				return [
				{code: 'v1',name:'v2'}'
				{code: 'v1',name:'v2'}
				];
			}
		}
how to call service 
	import service first
	inject service
		@NgComponent({
			providers:[EmployeeService]
		})
	inject service in component
		private _employeeService:EmployeeService;
		constructor(_employeeService:EmployeeService;){
			this._employeeService=_employeeService;
		}
		or in shorthad
			remove private variable and private keyword in constructor and remove assignment in constructor
			employees: IEmployee[];
			constructor(private _employeeService:EmployeeService;){
				this.employees = this._employeeService.getEmployees();
			}
		or use best way with ngOnInit hook to call service method
			import OnInit and implement ngOnInit hook
				import { Component, OnInit } from '@angular/core';
				import { IEmployee } from '@./employee';
				import { EmployeeService } from '@./employee.service';
				@Component({
					selector: 'employee',
					templateUrl: 'app/employee/employee.component.html',
					styleUrls: ['app/employee/employee.component.css'],
					providers: [EmployeeService]
				})
				export class EmployeeComponent implements OnInit {
					employees: IEmployee[];
					constructor(private _employeeService:EmployeeService;){
					}
					ngOnInit() {
						this.employees = this._employeeService.getEmployees();
					}
				}
		note we can also providers in module and that is the best option to get single instance for service
How to call webservice
-------------------------------
	import HttpModule in app.module.ts
		import { HttpModule } from '@angular/http';
		@NgModule({
			imports: [ BrowserModule, FormsModule, HttpModule],
		})

	import Http and Observable in service 
	inject Http using short hand form
		import { Http, Response } from '@angular/http';
		import { Observable } from 'rxjs/Observable';
		import 'rxjs/add/operator/map';
	return Observable from Service method
		@Injectable()
		export class EmployeeService {
			constructor(private _http: Http) { }
			getEmployees(): Observable<IEmployee[]> {
				return this._http.get('http://localhost:24535/api/employees')
					.map((response: Response) => <IEmployee[]>response.json());
			}
		}
	Sbscribe to Observable in component.ts(Observer)
			ngOnInit() {
				this._employeeService.getEmployees()
					.subscribe(employeesData => this.employees = employeesData);
			}	.subscribe(employeesData => this.employees = employeesData);

	use ngFor to wait view until ngOnInt metod exicution completes employee.component.html
		<tbody>
			<ng-container *ngFor="let employee of employees;">
				<tr>
					<td>{{employee.code | uppercase}}</td>
					<td>{{employee.name }}</td>
				</tr>
			</ng-container>
			<tr *ngIf="!employees">
				<td colspan="5">Loading data. Please wait...</td>
			</tr>
			<tr *ngIf="employees && employees.length==0">
				<td colspan="5"> No employee records to display</td>
			</tr>
		</tbody>

error handling
---------------------
	import catch and throw in service
		import 'rxjs/add/operator/catch';
		import 'rxjs/add/Observable/throw';
	append catch method to map method
	rethrow exception
		return Observable.throw(error);

		@Injectable()
		export class EmployeeService {

			constructor(private _http: Http) { }

			getEmployees(): Observable<IEmployee[]> {
				return this._http.get('http://localhost:24535/api/employees')
					.map((response: Response) => <IEmployee[]>response.json())
					.catch(this.handleError);
			}

			handleError(error: Response) {
				console.error(error);
				return Observable.throw(error);
			}
		}
	catch exception in component again
	catch exception in subscribe method second parameter
		export class EmployeeComponent implements OnInit {
			employees: IEmployee[];
			statusMessage: string = 'Loading data. Please wait...';
			ngOnInit() {
				this._employeeService.getEmployees()
					.subscribe(
					employeesData => this.employees = employeesData,
					error => {
						this.statusMessage =
							'Problem with the service. Please try again after sometime';
					});
		}

how add bootstrap and jquery
	install bootstrap in project folder from command promt
		npm install bootsrap@3 jquery --save
	include jquery.min.js in index.html
		<script src=""/>
	include and bootstrap css and js files
routing
---------------------------------------------------
1:create new components Home and pagenotfound, we do not need selector for this components
	since we are routing to these components, we only need selector we want to add this in other component
	create new folder home
	home.component.ts
2:resiter home and pagenotfound components in App model
3: changes in index.html
	<base href="/src/">
4: import RouterModule and Routes modeles in app module
	and define constant with type Routes arry
	import { RouterModule, Routes } from '@angular/router';
	const appRoutes: Routes = [
		{ path: 'home', component: HomeComponent },
		{ path: 'employees', component: EmployeeListComponent },
		{ path: '', redirectTo: '/home', pathMatch: 'full' },//this is redirect
		{ path: '**', component: PageNotFoundComponent }
	];
	@NgModule({
		imports: [
			BrowserModule, FormsModule, HttpModule,
			RouterModule.forRoot(appRoutes)
		],
	})
5:Tie the routes to application menu. Modify the root component (app.component.ts) as shown below
	import { Component } from '@angular/core';
	@Component({
		selector: 'my-app',
		template: `
						<div style="padding:5px">
							<ul class="nav nav-tabs">
								<li routerLinkActive="active">
									<a routerLink="home">Home</a>
								</li>
								<li routerLinkActive="active">
									<a routerLink="employees">Employees</a>
								</li>
							</ul>
							<br/>
							<router-outlet></router-outlet>//this is to tell where content should be desplayed
						</div>
				  `
	})


what is route parameter
	let say we want to display emp details when we click one of the emp record in dispalyed list
	add router
		const appRoutes: Routes = [
			{ path: 'employees', component: EmployeeListComponent },
			{ path: 'employees/:code', component: EmployeeComponent },
		];
	add routerLink directive to convert emp id to clickable link
		<a [routerLink] =['/empComponet', emp.id]>{{emp.id}}</a>
	create new method in service 
		getEmpById(id:string)
	import ActivatedRoute service in emp component and inject through dependency injection
	and retive route parameter value with ActivatedRoute service sanpshot method in ngOnInit method
		let id:string = this._activatedRoute.snapshot.param['id'];
		this._empService.getEmpById(id).subcribe(.....);

how to convert employ record in employ component to link to display details
---------------------------------------------------------------------------
1: add parameter router in app module
	const appRoutes: Routes = [
    { path: 'home', component: HomeComponent },
    { path: 'employees', component: EmployeeListComponent },
    { path: 'employees/:code', component: EmployeeComponent },
2: conver record name as link in employee.component.html
	<td>
		<a [routerLink]="['/employees',employee.code]">
			{{employee.code | uppercase}}
		</a>
	</td>
3: changes in employee.service.ts
	getEmployeeByCode(empCode: string): Observable<IEmployee> {
		return this._http.get("http://localhost:31324/api/employees/" + empCode)
			.map((response: Response) => <IEmployee>response.json())
			.catch(this.handleError);
	} 



how to careate component as attribute insted of element itself 
how to careate component as css class insted of element itself 
how to careate component as id insted of element itself 
what is data binding
what is string iterpolation
what is property binding
why we need property binding when we string interpolation(disable,hidden,check)

<div *ngFor="let item of [2,3,4,5]">
	{{item}}
</div>

<div *ngFor="let i of items">
	{{i}}
</div>


25
@Input
26
@input
how to add filter in productlist with productliter component
	add filter radios in productliter html
	get data from productlist to productfilter component
	parent htmml has child component selecter, so the selector pass name and values as propery binding
	and capture in child element component using @input
27
pass value from child to parent component using @Output decorator and EventBinder
get value in parent componet event
28
	how to pass data between non related components
	assuem there 3 components 1, continer 2,search, 3.product list
	continer componet is in app componet
	seacrh component, and productlist components are in continer component
	search and productlist componet does not have parent child relation, 
	but we have to pass data search to product to display only seached products in products page
29
	same example, but we only need to desplay results when we click search button
	in previous example no need to click search, just need to type it in textbox
	use templete reference variable
30
	<div>
		<input #searchInput> 
		<button (click)="updateSearchText(searchInput)">Search</button>
	</div>
	updateSearchText(inputEL : HtmlInputElement){
		inputEL.value;
	}
	here we are passing input value when putton clicked to component method
	
	<div>
		<input #searchInput> 
		<button (click)="updateSearchText()">Search</button>
	</div>
	@viewChild('searchInput') searchEL: ElementRef;
	updateSearchText(){
		this.inputEL.nativeElement.value;
	}
	with above code, input element is available as soon as input element is loaded.


38
	for each selecter tag, one component ince is created
	we can check it with writing log in constructor
	but by the time components are inisialized, we only have property inisialized values.
	but @input property value passed from parent component is not availavle
	@ngOnChanges, @ngOnInit, @ngDoCheck, @ngDestroy
	@ngAfterViewInit, @ngAfterViewChecked, @ngAfterContentInit, @ngAfterContentChecked

59
	view encasulation, CSS in one component only applicable to same component html
	but there are othen encapsulation properties we can apply

60
	not much
	so to pass data two non parent-chield compo , it was difficult with @input and event
	we can achive same with services
61
	create service
	service is just plain class in seprate ts file, this can be used any component methods
62 
		inject service as dependency injection insted of creating instance directly
		
		@Component({
		  selector: 'app-hero',
		  templateUrl: './hero.component.html',
		  providers: [ServiceOne]
		})
		export class Cone{
			constructor(private x : ServiceOne){
			
			}
			
			onsubscribe(){
				this.x.subscribe();
			}
		
		}
	
63
	hierarachial dependency
	if we inject service with provider that component seperate instance of service
	if we do not use provider in child component, we can still use service, but this time we are sharing same service insce between parent and child componets
	if inject in app module file it self then all components in that module can use injected service instance
64
	pratice code example for hierarachial dependency
	componets are like app->admin>user
	admin has form to collect userdata
	user has deisplay logic for list of users
	adimn and user component selecters are in app html one after other
	use service class for creating user and adding into list
	crete use model class as well
65
	how inject loger service in userservice
	1.both include in module file
	2. @Injectable() on the top of userservice 
	3. constructor in userservice
		constructor(private x : LoggerService){}
	but when we inject service in component we do not add @Injectable() 
	but we need this for service to service injection


	
68
	observable is to hadle stream of data in async form with RxJS	
69
	when button clicked data should dispaly
	x :any[]=[];
	myObservable = new Observable((observer) ->{
		observer.next(['1','2','3','4']);
	});
	getAsycData(){
		this.myObservable.subscribe((val:any)=>{this.x=val;});
	}
	
	second ecample
	x :any[]=[];
	myObservable = new Observable((observer) ->{
		setInterval(()=>{observer.next(['1'])},1000);
		setInterval(()=>{observer.next(['2'])},2000);
		setInterval(()=>{observer.next(['3'])},4000);
		setInterval(()=>{observer.next(['4'])},6000);
	});
	getAsycData(){
		this.myObservable.subscribe((val:any)=>{this.x.push(val);});
	}
	
81,82


113			[113-124-templete driven form]
            ----------------------------------
	import FormsModule
	FormsModule converst form tage to templete driven form
	
	how to get HTMLFormElement in component class
		<form class="form" (ngSubmit)="OnFormSubmitted(registrationForm)" #registrationForm>
			<input type="submit" value="Submit" class="submit-btn" [disabled]="!registrationForm.valid"> 
		</form>
		OnFormSubmitted(form:HTMLFormElement){
			console.log(form)
		}
	how to get NgForm (json form form of heml form)in component class
		<form class="form" (ngSubmit)="OnFormSubmitted(registrationForm)" #registrationForm="ngForm">
			<input type="submit" value="Submit" class="submit-btn" [disabled]="!registrationForm.valid"> 
		</form>
		OnFormSubmitted(form:NgForm){
			console.log(form)
		}
	how to get NgForm with @ViewChild decorator in component class
		<form class="form" (ngSubmit)="OnFormSubmitted()" #registrationForm="ngForm">
			<input type="submit" value="Submit" class="submit-btn" [disabled]="!registrationForm.valid"> 
		</form>
		@ViewChild(registrationForm) form:NgForm;
		OnFormSubmitted(){
			console.log(this.form)
		}
	using @ViewChild decorator we can access DOM object or component from templete
114	
	NgForm has controls and value properties, but to populate value into it
		we shlod do two things on element (ngModule and name attribute)
		<input type="text" placeholder="First Name" name="firstname" ngModel />
	access form values 
		OnFormSubmitted(){
			console.log(this.form.value.firstname)
			console.log(this.form.controls['firstname'].value)
		}
	
124			[124-135-Reactive form]
            -------------------------------
	import ReactiveFormsModule 
	how to define reactive form in component class
		export class AppComponent implements OnInit{
		reactiveForm: FormGroup;

		ngOnInit(){
			this.reactiveForm = new FormGroup({
			  firstname: new FormControl(null)
			})
		}
		}
	how to connect rectiv form in component to form in html
		<form class="form" [formGroup]="reactiveForm" (ngSubmit)="OnFormSubmitted()">
		</form>
	how to connect form elements
		<form class="form" [formGroup]="reactiveForm" (ngSubmit)="OnFormSubmitted()">
			<input type="text" placeholder="First Name" formControlName="firstname" />
		</form>
125
	how to add validaters
		ngOnInit(){
		this.reactiveForm = new FormGroup({
		  firstname: new FormControl(null, [Validators.required, CustomValidators.noSpaceAllowed]),
		  email: new FormControl(null, [Validators.required, Validators.email])
		  })
		  }
		  valid, invalid properties are there at form level and controller
	how to reactive css class classes
		by default reactive form adds css classes like ng-touch, ng-untouch, ng-invalied
		using this we can chnage elements display styyle
			input.ng-invalid.ng-touched{
			  border: red 2px solid;
			}
		above code updated border value if is touched and data not valied


136      [136-155-HttpClient]
		---------------------------------
	no need to watch it is just rest basics and firebase setup
137
	step1: basic html project
	UI- one create task button, it will display popup form 
		tasks will be dispalyed in below button
		task record will have edit, delete options
		
	components-
		appcomponet -[headder - dashboard - footer]
		dashboard component -[create component]
	create component 
		form- tempelte driven form
			ngForm, onsubmit, name, ngModule
		class 
			@output to emmit event to dashboard class
	dashboard 
		form
			add create form selecter
			in selecter config emiter to send data from crete class to dashboard class

138 import HttpClientModule in modules.ts

	http: HttpClient = inject(HttpClient)
	
	this.http.post<{name:string}>('url',body,{headers:headers})
			.subcribe( (response)=> {console.log(response)});
139
	this.http.get<{ [key:string]:Task}>('url')
				.subcribe( (response)=> {console.log(response)});
	you can watch the end 10 min for pipe and map knowledge
	this.http.get<{ [key:string]:Task}>('url').pipe(map((response) => {
                 //TRANSFORM DATA
                 let tasks = [];
                 for(let key in response){
                   if(response.hasOwnProperty(key)){
                     tasks.push({...response[key], id: key});
                   }              
                 }
     
                 return tasks;
            })
140
	display task in html
	fetch taskes in ngOnInit and assgin to intance variable array
	<div class="task-item" [ngClass]="'task-' + task.status" *ngFor="let task of allTasks">
	this line sets different css class based on status
141
	delete task
	add click event and pass task id, and delete it
	




156    [Authentication]


oauth2-oidc
-----------------------